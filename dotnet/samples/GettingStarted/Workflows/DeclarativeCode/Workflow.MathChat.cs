// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Collections;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows;
using Microsoft.Agents.Workflows.Declarative;
using Microsoft.Agents.Workflows.Declarative.Extensions;
using Microsoft.Agents.Workflows.Declarative.Kit;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.AI.Agents;

namespace Demo.DeclarativeCode;

/// <summary>
/// This class provides a factory method to create a <see cref="Workflow" /> instance.
/// </summary>
/// <remarks>
/// The workflow defined here was generated from a declarative workflow definition.
/// Declarative workflows utilize Power FX for defining conditions and expressions.
/// To learn more about Power FX, see:
/// https://learn.microsoft.com/power-platform/power-fx/formula-reference-copilot-studio
/// </remarks>
public static class MathChatWorkflowProvider
{
    /// <summary>
    /// The root executor for a declarative workflow.
    /// </summary>
    internal sealed class WorkflowDemoRootExecutor<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage> inputTransform) :
        RootExecutor<TInput>("workflow_demo_Root", options, inputTransform)
        where TInput : notnull
    {
        protected override async ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken)
        {
            // Set environment variables
            await context.QueueStateUpdateAsync("FOUNDRY_AGENT_STUDENT", this.GetEnvironmentVariable("FOUNDRY_AGENT_STUDENT"), "Env").ConfigureAwait(false);
            await context.QueueStateUpdateAsync("FOUNDRY_AGENT_TEACHER", this.GetEnvironmentVariable("FOUNDRY_AGENT_TEACHER"), "Env").ConfigureAwait(false);
            // Initialize variables
            await context.QueueStateUpdateAsync("Project", UnassignedValue.Instance, "Topic").ConfigureAwait(false);
            await context.QueueStateUpdateAsync("TeacherResponse", UnassignedValue.Instance, "Topic").ConfigureAwait(false);
            await context.QueueStateUpdateAsync("TurnCount", UnassignedValue.Instance, "Topic").ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Assigns an evaluated expression, other variable, or literal value to the  "Topic.Project" variable.
    /// </summary>
    internal sealed class SetProjectExecutor(FormulaSession session) : ActionExecutor(id: "set_project", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            object? evaluatedValue = await context.ReadStateAsync<object>(key: "LastMessageText", scopeName: "System").ConfigureAwait(false); // %%% HAXX: LastMessageText
            await context.QueueStateUpdateAsync(key: "Project", value: evaluatedValue, scopeName: "Topic").ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Invokes an agent to process messages and return a response within a conversation context.
    /// </summary>
    internal sealed class QuestionStudentExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : AgentExecutor(id: "question_student", session, agentProvider)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? agentName = await context.ReadStateAsync<string?>(key: "FOUNDRY_AGENT_STUDENT", scopeName: "Env").ConfigureAwait(false);

            if (string.IsNullOrWhiteSpace(agentName))
            {
                throw new InvalidOperationException($"Agent name must be defined: {this.Id}");
            }

            string? conversationId = await context.ReadStateAsync<string?>(key: "ConversationId", scopeName: "System").ConfigureAwait(false);
            bool autoSend = true;
            string? additionalInstructions = null;
            string? input = await context.ReadStateAsync<string?>(key: "Project", scopeName: "Topic").ConfigureAwait(false);
            ChatMessage[]? inputMessages = null;// HAXX: await context.EvaluateExpressionAsync<ChatMessage[]>("[UserMessage(Topic.Project)]").ConfigureAwait(false);
            if (input is not null)
            {
                inputMessages = [new(ChatRole.User, input)];
            }

            AgentRunResponse agentResponse =
                InvokeAgentAsync(
                    context,
                    agentName,
                    conversationId,
                    autoSend,
                    additionalInstructions,
                    inputMessages,
                    cancellationToken).ToEnumerable().ToAgentRunResponse();

            if (autoSend)
            {
                await context.AddEventAsync(new AgentRunResponseEvent(this.Id, agentResponse)).ConfigureAwait(false);
            }

            return default;
        }
    }

    /// <summary>
    /// Resets the value of the "Topic.Project" variable, potentially causing re-evaluation
    /// of the default value, question or action that provides the value to this variable.
    /// </summary>
    internal sealed class ResetProjectExecutor(FormulaSession session) : ActionExecutor(id: "reset_project", session)
    {
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            await context.QueueStateUpdateAsync(key: "Project", value: UnassignedValue.Instance, scopeName: "Topic").ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Invokes an agent to process messages and return a response within a conversation context.
    /// </summary>
    internal sealed class QuestionTeacherExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : AgentExecutor(id: "question_teacher", session, agentProvider)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? agentName = await context.ReadStateAsync<string?>(key: "FOUNDRY_AGENT_TEACHER", scopeName: "Env").ConfigureAwait(false);

            if (string.IsNullOrWhiteSpace(agentName))
            {
                throw new InvalidOperationException($"Agent name must be defined: {this.Id}");
            }

            string? conversationId = await context.ReadStateAsync<string?>(key: "ConversationId", scopeName: "System").ConfigureAwait(false);
            bool autoSend = true;
            string? additionalInstructions = null;
            ChatMessage[]? inputMessages = null;

            AgentRunResponse agentResponse =
                InvokeAgentAsync(
                    context,
                    agentName,
                    conversationId,
                    autoSend,
                    additionalInstructions,
                    inputMessages,
                    cancellationToken).ToEnumerable().ToAgentRunResponse();

            if (autoSend)
            {
                await context.AddEventAsync(new AgentRunResponseEvent(this.Id, agentResponse)).ConfigureAwait(false);
            }

            // %%% HAXX await context.QueueStateUpdateAsync(key: "TeacherResponse", value: agentResponse.Messages, scopeName: "Topic").ConfigureAwait(false);
            await context.QueueStateUpdateAsync(key: "TeacherResponse", value: agentResponse.Messages[0].ToRecord(), scopeName: "Topic").ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Assigns an evaluated expression, other variable, or literal value to the  "Topic.TurnCount" variable.
    /// </summary>
    internal sealed class SetCountIncrementExecutor(FormulaSession session) : ActionExecutor(id: "set_count_increment", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            object? evaluatedValue = await context.EvaluateExpressionAsync("Topic.TurnCount + 1").ConfigureAwait(false);
            await context.QueueStateUpdateAsync(key: "TurnCount", value: evaluatedValue, scopeName: "Topic").ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Conditional branching similar to an if / elseif / elseif / else chain.
    /// </summary>
    internal sealed class CheckCompletionExecutor(FormulaSession session) : ActionExecutor(id: "check_completion", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            bool condition0 = await context.EvaluateExpressionAsync<bool>("""!IsBlank(Find("CONGRATULATIONS", Upper(Topic.TeacherResponse.Text)))""").ConfigureAwait(false);
            if (condition0)
            {
                return "check_turn_done";
            }

            bool condition1 = await context.EvaluateExpressionAsync<bool>("Topic.TurnCount < 4").ConfigureAwait(false);
            if (condition1)
            {
                return "check_turn_count";
            }

            return "check_completionElseActions";
        }
    }

    /// <summary>
    /// Formats a message template and sends an activity event.
    /// </summary>
    internal sealed class SendactivityDoneExecutor(FormulaSession session) : ActionExecutor(id: "sendActivity_done", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string activityText =
                await context.FormatTemplateAsync(
                    """
                    GOLD STAR!
                    """
                );
            AgentRunResponse response = new([new ChatMessage(ChatRole.Assistant, activityText)]);
            await context.AddEventAsync(new AgentRunResponseEvent(this.Id, response)).ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Formats a message template and sends an activity event.
    /// </summary>
    internal sealed class SendactivityTiredExecutor(FormulaSession session) : ActionExecutor(id: "sendActivity_tired", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string activityText =
                await context.FormatTemplateAsync(
                    """
                    Let's try again later...
                    """
                );
            AgentRunResponse response = new([new ChatMessage(ChatRole.Assistant, activityText)]);
            await context.AddEventAsync(new AgentRunResponseEvent(this.Id, response)).ConfigureAwait(false);

            return default;
        }
    }

    public static Workflow<TInput> CreateWorkflow<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null)
        where TInput : notnull
    {
        // Create root executor to initialize the workflow.
        inputTransform ??= (message) => DeclarativeWorkflowBuilder.DefaultTransform(message);
        WorkflowDemoRootExecutor<TInput> workflowDemoRoot = new(options, inputTransform);
        DelegateExecutor workflowDemo = new(id: "workflow_demo", workflowDemoRoot.Session);
        SetProjectExecutor setProject = new(workflowDemoRoot.Session);
        QuestionStudentExecutor questionStudent = new(workflowDemoRoot.Session, options.AgentProvider);
        ResetProjectExecutor resetProject = new(workflowDemoRoot.Session);
        QuestionTeacherExecutor questionTeacher = new(workflowDemoRoot.Session, options.AgentProvider);
        SetCountIncrementExecutor setCountIncrement = new(workflowDemoRoot.Session);
        CheckCompletionExecutor checkCompletion = new(workflowDemoRoot.Session);
        DelegateExecutor checkTurnDone = new(id: "check_turn_done", workflowDemoRoot.Session);
        DelegateExecutor checkTurnCount = new(id: "check_turn_count", workflowDemoRoot.Session);
        DelegateExecutor checkCompletionelseactions = new(id: "check_completionElseActions", workflowDemoRoot.Session);
        DelegateExecutor checkTurnDoneactions = new(id: "check_turn_doneActions", workflowDemoRoot.Session);
        SendactivityDoneExecutor sendActivityDone = new(workflowDemoRoot.Session);
        DelegateExecutor checkTurnCountactions = new(id: "check_turn_countActions", workflowDemoRoot.Session);
        DelegateExecutor gotoStudentAgent = new(id: "goto_student_agent", workflowDemoRoot.Session);
        // %%% PRUNE DelegateExecutor checkTurnCountRestart = new(id: "check_turn_count_Restart", workflowDemoRoot.Session);
        SendactivityTiredExecutor sendActivityTired = new(workflowDemoRoot.Session);
        DelegateExecutor checkTurnDonePost = new(id: "check_turn_done_Post", workflowDemoRoot.Session);
        DelegateExecutor checkCompletionPost = new(id: "check_completion_Post", workflowDemoRoot.Session);
        DelegateExecutor checkTurnCountPost = new(id: "check_turn_count_Post", workflowDemoRoot.Session);
        DelegateExecutor checkTurnDoneactionsPost = new(id: "check_turn_doneActions_Post", workflowDemoRoot.Session);
        // %%% PRUNE DelegateExecutor gotoStudentAgentRestart = new(id: "goto_student_agent_Restart", workflowDemoRoot.Session);
        DelegateExecutor checkTurnCountactionsPost = new(id: "check_turn_countActions_Post", workflowDemoRoot.Session);
        DelegateExecutor checkCompletionelseactionsPost = new(id: "check_completionElseActions_Post", workflowDemoRoot.Session);

        // Define the workflow builder
        WorkflowBuilder builder = new(workflowDemoRoot);

        // Connect executors
        builder.AddEdge(workflowDemoRoot, workflowDemo);
        builder.AddEdge(workflowDemo, setProject);
        builder.AddEdge(setProject, questionStudent);
        builder.AddEdge(questionStudent, resetProject);
        builder.AddEdge(resetProject, questionTeacher);
        builder.AddEdge(questionTeacher, setCountIncrement);
        builder.AddEdge(setCountIncrement, checkCompletion);
        builder.AddEdge(checkCompletion, checkTurnDone, (object? result) => string.Equals("check_turn_done", result as string, StringComparison.Ordinal));
        builder.AddEdge(checkCompletion, checkTurnCount, (object? result) => string.Equals("check_turn_count", result as string, StringComparison.Ordinal));
        builder.AddEdge(checkCompletion, checkCompletionelseactions, (object? result) => string.Equals("check_completionElseActions", result as string, StringComparison.Ordinal));
        builder.AddEdge(checkTurnDone, checkTurnDoneactions);
        builder.AddEdge(checkTurnDoneactions, sendActivityDone);
        builder.AddEdge(checkTurnCount, checkTurnCountactions);
        builder.AddEdge(checkTurnCountactions, gotoStudentAgent);
        builder.AddEdge(gotoStudentAgent, questionStudent);
        // %%% PRUNE builder.AddEdge(checkTurnCountRestart, checkCompletionelseactions);
        builder.AddEdge(checkCompletionelseactions, sendActivityTired);
        builder.AddEdge(checkTurnDonePost, checkCompletionPost);
        builder.AddEdge(checkTurnCountPost, checkCompletionPost);
        builder.AddEdge(sendActivityDone, checkTurnDoneactionsPost);
        builder.AddEdge(checkTurnDoneactionsPost, checkTurnDonePost);
        // %%% PRUNE builder.AddEdge(gotoStudentAgentRestart, checkTurnCountactionsPost);
        builder.AddEdge(checkTurnCountactionsPost, checkTurnCountPost);
        builder.AddEdge(sendActivityTired, checkCompletionelseactionsPost);
        builder.AddEdge(checkCompletionelseactionsPost, checkCompletionPost);

        // Build the workflow
        return builder.Build<TInput>();
    }
}
