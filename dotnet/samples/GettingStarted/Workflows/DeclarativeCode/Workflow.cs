// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.AI;
using Microsoft.Agents.Workflows;
using Microsoft.Agents.Workflows.Declarative;
using Microsoft.Agents.Workflows.Declarative.Kit;
using Microsoft.Extensions.AI;

namespace Test.WorkflowProviders;

/// <summary>
/// This class provides a factory method to create a <see cref="Workflow" /> instance.
/// </summary>
/// <remarks>
/// The workflow defined here was generated from a declarative workflow definition.
/// Declarative workflows utilize Power FX for defining conditions and expressions.
/// To learn more about Power FX, see:
/// https://learn.microsoft.com/power-platform/power-fx/formula-reference-copilot-studio
/// </remarks>
public static class TestWorkflowProvider
{
    /// <summary>
    /// The root executor for a declarative workflow.
    /// </summary>
    internal sealed class WorkflowTestRootExecutor<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage> inputTransform) :
        RootExecutor<TInput>("workflow_test_Root", options, inputTransform)
        where TInput : notnull
    {
        protected override async ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken)
        {
            // Initialize variables
            await context.QueueStateUpdateAsync("FirstConversationId", UnassignedValue.Instance, "Topic").ConfigureAwait(false);
            await context.QueueStateUpdateAsync("MyMessage1", UnassignedValue.Instance, "Topic").ConfigureAwait(false);
            await context.QueueStateUpdateAsync("SecondConversationId", UnassignedValue.Instance, "Topic").ConfigureAwait(false);
        }
    }

    /// <summary>
    /// Creates a new conversation and stores the identifier value to the "Topic.FirstConversationId" variable.
    /// </summary>
    internal sealed class ConversationCreate1Executor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "conversation_create1", session)
    {
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string conversationId = await agentProvider.CreateConversationAsync(cancellationToken).ConfigureAwait(false);
            await context.QueueStateUpdateAsync(key: "FirstConversationId", value: conversationId, scopeName: "Topic").ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Creates a new conversation and stores the identifier value to the "Topic.SecondConversationId" variable.
    /// </summary>
    internal sealed class ConversationCreate2Executor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "conversation_create2", session)
    {
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string conversationId = await agentProvider.CreateConversationAsync(cancellationToken).ConfigureAwait(false);
            await context.QueueStateUpdateAsync(key: "SecondConversationId", value: conversationId, scopeName: "Topic").ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Formats a message template and sends an activity event.
    /// </summary>
    internal sealed class SendactivityConversationExecutor(FormulaSession session) : ActionExecutor(id: "sendActivity_conversation", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string activityText =
                await context.FormatTemplateAsync(
                    """
                    Conversation 1: {Topic.FirstConversationId}
                    Conversation 2: {Topic.SecondConversationId}
                    """
                );
            AgentRunResponse response = new([new ChatMessage(ChatRole.Assistant, activityText)]);
            await context.AddEventAsync(new AgentRunResponseEvent(this.Id, response)).ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Adds a new message to the specified agent conversation
    /// </summary>
    internal sealed class AddMessageExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "add_message", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? conversationId = await context.ReadStateAsync<string?>(key: "FirstConversationId", scopeName: "Topic").ConfigureAwait(false);
            ArgumentNullException.ThrowIfNull(conversationId, nameof(conversationId));
            ChatMessage newMessage = new(ChatRole.User, [.. GetContentAsync().ToEnumerable()]) { AdditionalProperties = this.GetMetadata() };
            await agentProvider.CreateMessageAsync(conversationId, newMessage, cancellationToken).ConfigureAwait(false);
            await context.QueueStateUpdateAsync(key: "MyMessage1", value: newMessage, scopeName: "Topic").ConfigureAwait(false);

            return default;

            async IAsyncEnumerable<AIContent> GetContentAsync()
            {
                string contentValue1 =
                    await context.FormatTemplateAsync(
                        """
                    {System.LastMessage.Text}
                    """);
                yield return new TextContent(contentValue1);
            }
        }
        private AdditionalPropertiesDictionary? GetMetadata()
        {
            Dictionary<string, object?>? metadata = null;

            if (metadata is null)
            {
                return null;
            }

            return new AdditionalPropertiesDictionary(metadata);
        }
    }

    /// <summary>
    /// Formats a message template and sends an activity event.
    /// </summary>
    internal sealed class SendactivityMessageExecutor(FormulaSession session) : ActionExecutor(id: "sendActivity_message", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string activityText =
                await context.FormatTemplateAsync(
                    """
                    Messsage 1: {Topic.MyMessage1}
                    """
                );
            AgentRunResponse response = new([new ChatMessage(ChatRole.Assistant, activityText)]);
            await context.AddEventAsync(new AgentRunResponseEvent(this.Id, response)).ConfigureAwait(false);

            return default;
        }
    }

    /// <summary>
    /// Copies one or more messages into the specified agent conversation.
    /// </summary>
    internal sealed class CopyMessagesExecutor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "copy_messages", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string? conversationId = await context.ReadStateAsync<string?>(key: "SecondConversationId", scopeName: "Topic").ConfigureAwait(false);
            ArgumentNullException.ThrowIfNull(conversationId, nameof(conversationId));
            ChatMessage[]? messages = await context.EvaluateExpressionAsync<ChatMessage[]>("[Topic.MyMessage1]").ConfigureAwait(false);
            if (messages is not null)
            {
                foreach (ChatMessage message in messages)
                {
                    await agentProvider.CreateMessageAsync(conversationId, message, cancellationToken).ConfigureAwait(false);
                }
            }
            return default;
        }
    }

    /// <summary>
    /// Formats a message template and sends an activity event.
    /// </summary>
    internal sealed class SendactivityCopyExecutor(FormulaSession session) : ActionExecutor(id: "sendActivity_copy", session)
    {
        // <inheritdoc />
        protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string activityText =
                await context.FormatTemplateAsync(
                    """
                    Done!
                    """
                );
            AgentRunResponse response = new([new ChatMessage(ChatRole.Assistant, activityText)]);
            await context.AddEventAsync(new AgentRunResponseEvent(this.Id, response)).ConfigureAwait(false);

            return default;
        }
    }

    public static Workflow CreateWorkflow<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null)
        where TInput : notnull
    {
        // Create root executor to initialize the workflow.
        inputTransform ??= (message) => DeclarativeWorkflowBuilder.DefaultTransform(message);
        WorkflowTestRootExecutor<TInput> workflowTestRoot = new(options, inputTransform);
        DelegateExecutor workflowTest = new(id: "workflow_test", workflowTestRoot.Session);
        ConversationCreate1Executor conversationCreate1 = new(workflowTestRoot.Session, options.AgentProvider);
        ConversationCreate2Executor conversationCreate2 = new(workflowTestRoot.Session, options.AgentProvider);
        SendactivityConversationExecutor sendActivityConversation = new(workflowTestRoot.Session);
        AddMessageExecutor addMessage = new(workflowTestRoot.Session, options.AgentProvider);
        SendactivityMessageExecutor sendActivityMessage = new(workflowTestRoot.Session);
        CopyMessagesExecutor copyMessages = new(workflowTestRoot.Session, options.AgentProvider);
        SendactivityCopyExecutor sendActivityCopy = new(workflowTestRoot.Session);

        // Define the workflow builder
        WorkflowBuilder builder = new(workflowTestRoot);

        // Connect executors
        builder.AddEdge(workflowTestRoot, workflowTest);
        builder.AddEdge(workflowTest, conversationCreate1);
        builder.AddEdge(conversationCreate1, conversationCreate2);
        builder.AddEdge(conversationCreate2, sendActivityConversation);
        builder.AddEdge(sendActivityConversation, addMessage);
        builder.AddEdge(addMessage, sendActivityMessage);
        builder.AddEdge(sendActivityMessage, copyMessages);
        builder.AddEdge(copyMessages, sendActivityCopy);

        // Build the workflow
        return builder.Build();
    }
}
