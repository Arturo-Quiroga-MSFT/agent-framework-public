// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows;
using Microsoft.Agents.Workflows.Declarative;
using Microsoft.Agents.Workflows.Declarative.Extensions;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.AI.Agents;

namespace Demo.DeclarativeCode;


internal sealed class SetUserInputExecutor() : ActionExecutor(id: "set_user_input")
{
    protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {
        object? value = await context.ReadStateAsync<object>("LastMessageText", "System").ConfigureAwait(false);

        await context.QueueStateUpdateAsync("UserInput", value, "Topic").ConfigureAwait(false);
    }
}

internal sealed class SetUserNameExecutor() : ActionExecutor(id: "set_user_name")
{
    protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {
        object? value = await context.ReadStateAsync<object>("USERNAME", "Env").ConfigureAwait(false);

        await context.QueueStateUpdateAsync("UserName", value, "Global").ConfigureAwait(false);
    }
}

internal sealed class SendResultExecutor() : ActionExecutor(id: "send_result")
{
    protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {
        string activityText =
            await context.FormatAsync(
                """
                Hello {Global.UserName},
                You said, "{Topic.UserInput}"
                """
            );
        AgentRunResponse response = new([new ChatMessage(ChatRole.Assistant, activityText)]);
        await context.AddEventAsync(new AgentRunResponseEvent(this.Id, response)).ConfigureAwait(false);

    }
}

public static class WorkflowProvider
{
    public static Workflow<TInput> CreateWorkflow<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null)
        where TInput : notnull
    {
        // Define the workflow builder
        DeclarativeWorkflowBuilder<TInput> builder = new("root_workflow_demo", options, inputTransform);

        // Create executor instances
        SetUserInputExecutor setUserInput = new();
        SetUserNameExecutor setUserName = new();
        SendResultExecutor sendResult = new();

        // Connect executors
        builder.AddEdge(builder.Root, setUserInput);
        builder.AddEdge(builder.Root, setUserName);
        builder.AddEdge(builder.Root, sendResult);

        // Build the workflow
        return builder.Build<TInput>();
    }
}
