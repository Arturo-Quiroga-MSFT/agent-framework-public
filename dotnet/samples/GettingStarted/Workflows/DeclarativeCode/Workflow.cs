// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows;
using Microsoft.Agents.Workflows.Declarative;
using Microsoft.Agents.Workflows.Declarative.Kit;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.AI.Agents;
using Microsoft.Extensions.Configuration;

namespace Demo.DeclarativeCode;

public static class SampleWorkflowProvider
{
    /// <summary>
    /// The root executor for a declarative workflow.
    /// </summary>
    internal sealed class RootWorkflowDemoExecutor<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null) :
        RootExecutor<TInput>("root_workflow_demo", options)
        where TInput : notnull
    {
        protected override async ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken)
        {
            ChatMessage input = (inputTransform ?? DefaultInputTransform).Invoke(message);
            //await context.SetLastMessageAsync(input).ConfigureAwait(false); // %%% SYSTEM VARS
            await context.QueueStateUpdateAsync("LastMessageText", input.Text, "System").ConfigureAwait(false);

            // Set environment variables
            await context.QueueStateUpdateAsync("USERNAME", this.GetEnvironmentVariable("USERNAME"), "Env").ConfigureAwait(false);

            // Set user variables to default values
            await context.QueueStateUpdateAsync("RunCount", UnassignedValue.Instance, "Global").ConfigureAwait(false);
            await context.QueueStateUpdateAsync("UserName", UnassignedValue.Instance, "Global").ConfigureAwait(false);
            await context.QueueStateUpdateAsync("UserInput", UnassignedValue.Instance, "Topic").ConfigureAwait(false);
        }
    }

    internal sealed class SetCountExecutor(ExpressionContext context) : ActionExecutor(id: "set_count", context)
    {
        protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            object? value = await context.EvaluateExpressionAsync("Global.RunCount + 1", cancellationToken).ConfigureAwait(false);

            await context.QueueStateUpdateAsync("RunCount", value, "Global").ConfigureAwait(false);
        }
    }

    internal sealed class SetUserInputExecutor(ExpressionContext context) : ActionExecutor(id: "set_user_input", context)
    {
        protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            object? value = await context.ReadStateAsync<object>("LastMessageText", "System").ConfigureAwait(false);

            await context.QueueStateUpdateAsync("UserInput", value, "Topic").ConfigureAwait(false);
        }
    }

    internal sealed class SetUserNameExecutor(ExpressionContext context) : ActionExecutor(id: "set_user_name", context)
    {
        protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            object? value = await context.ReadStateAsync<object>("USERNAME", "Env").ConfigureAwait(false);

            await context.QueueStateUpdateAsync("UserName", value, "Global").ConfigureAwait(false);
        }
    }

    internal sealed class SendResultExecutor(ExpressionContext context) : ActionExecutor(id: "send_result", context)
    {
        protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            string activityText =
                await context.FormatTemplateAsync(
                    """
                    Hello {Global.UserName},
                    You said, "{Topic.UserInput}"
                    (x{Global.RunCount})
                    """
                );
            AgentRunResponse response = new([new ChatMessage(ChatRole.Assistant, activityText)]);
            await context.AddEventAsync(new AgentRunResponseEvent(this.Id, response)).ConfigureAwait(false);
        }
    }

    public static Workflow<TInput> CreateWorkflow<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null)
        where TInput : notnull
    {
        // Create executor instances
        RootWorkflowDemoExecutor<TInput> root = new(options, inputTransform);
        SetCountExecutor setCount = new(root.Context);
        SetUserInputExecutor setUserInput = new(root.Context);
        SetUserNameExecutor setUserName = new(root.Context);
        SendResultExecutor sendResult = new(root.Context);

        // Define the workflow builder
        WorkflowBuilder builder = new(root);

        // Connect executors
        builder.AddEdge(root, setCount);
        builder.AddEdge(setCount, setUserInput);
        builder.AddEdge(setUserInput, setUserName);
        builder.AddEdge(setUserName, sendResult);

        // Build the workflow
        return builder.Build<TInput>();
    }
}
