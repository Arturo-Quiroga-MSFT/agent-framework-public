// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Agents.Workflows.Declarative.CodeGen
{
    using Microsoft.Agents.Workflows.Declarative.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class ProviderTemplate : CodeTemplate
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write(@"
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows;
using Microsoft.Agents.Workflows.Declarative;
using Microsoft.Agents.Workflows.Declarative.Kit;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.AI.Agents;
");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

if (this.Namespace is not null) 
{
            
            #line default
            #line hidden
            this.Write("\nnamespace ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Namespace));
            
            #line default
            #line hidden
            this.Write(";\n");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write(@"
/// <summary>
/// This class provides a factory method to create a <see cref=""Workflow"" /> instance.
/// </summary>
/// <remarks>
/// The workflow defined here was generated from a declarative workflow definition.
/// Declarative workflows utilize Power FX for defining conditions and expressions.
/// To learn more about Power FX, see:
/// https://learn.microsoft.com/power-platform/power-fx/formula-reference-copilot-studio
/// </remarks>
public static class ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Prefix ?? string.Empty));
            
            #line default
            #line hidden
            this.Write("WorkflowProvider\n{");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

foreach (string executor in ByLine(this.Executors, formatGroup: true))
{ 
            
            #line default
            #line hidden
            this.Write("\n    ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(executor));
            
            #line default
            #line hidden
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\n    public static Workflow<TInput> CreateWorkflow<TInput>(\n        DeclarativeWo" +
                    "rkflowOptions options,\n        Func<TInput, ChatMessage>? inputTransform = null)" +
                    " \n        where TInput : notnull\n    {\n        // Create executor instances\n    " +
                    "    ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.RootExecutorType));
            
            #line default
            #line hidden
            this.Write("Executor<TInput> root = new(options, inputTransform);");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

foreach (string instance in ByLine(this.Instances))
{ 
            
            #line default
            #line hidden
            this.Write("\n        ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(instance));
            
            #line default
            #line hidden
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

}
            
            #line default
            #line hidden
            this.Write("\n\n        // Define the workflow builder\n        WorkflowBuilder builder = new(ro" +
                    "ot);\n\n        // Connect executors");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

foreach (string edge in ByLine(this.Edges))
{ 
            
            #line default
            #line hidden
            this.Write("\n        ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(edge));
            
            #line default
            #line hidden
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\ProviderTemplate.tt"

}
 
            
            #line default
            #line hidden
            this.Write("\n\n        // Build the workflow\n        return builder.Build<TInput>();\n    }\n}\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
