<#@ template language="C#" inherits="ActionTemplate" visibility="internal" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ include file="Snippets/Index.tt" once="true" #>
/// <summary>
/// Invokes an agent to process messages and return a response within a conversation context.
/// </summary>
internal sealed class <#= this.Name #>Executor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "<#= this.Id #>", session)
{
    // <inheritdoc />
    protected override async ValueTask<object?> ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {<# 
        EvaluateStringExpression(this.Model.Agent.Name, "agentName");
        EvaluateStringExpression(this.Model.ConversationId, "conversationId");
        EvaluateBoolExpression(this.Model.Output?.AutoSend, "autoSend" /* %%% TODO: defaultValue: true */); #>
        string additionalInstructions =
            await context.FormatTemplateAsync(
                """<#
                FormatMessageTemplate(this.Model.Input?.AdditionalInstructions); #>
                """);

        AgentRunResponse agentResponse = InvokeAgentAsync().ToEnumerable().ToAgentRunResponse();

        if (autoSend)
        {
            await context.AddEventAsync(new AgentRunResponseEvent(this.Id, agentResponse)).ConfigureAwait(false);
        }<#
        AssignVariable(this.Messages, "agentRunResponse.Messages"); 
        #>
        return default;

        async IAsyncEnumerable<AgentRunResponseUpdate> InvokeAgentAsync()
        {
           yield return break;
        }
    }
}