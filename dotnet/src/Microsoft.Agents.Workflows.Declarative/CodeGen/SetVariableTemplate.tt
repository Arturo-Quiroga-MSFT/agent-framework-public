<#@ template language="C#" visibility="internal" #>
<#@ assembly name="System.Core" #>
internal sealed class <#= this.Name #>Executor() : ActionExecutor(id: "<#= this.Id #>")
{
    protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {<# 
if (this.Model.Value is null)
{ 
    throw new DeclarativeModelException($"Undefined value type: {this.Id}.");
}
else if (this.Model.Value.IsLiteral)
{ #>
        object? value = <#= Format(this.Model.Value.LiteralValue) #>;
<# }
else if (this.Model.Value.IsVariableReference)
{ #>
        object? value = await context.ReadStateAsync<object>("<#= this.Model.Value.VariableReference.VariableName #>", "<#= this.Model.Value.VariableReference.VariableScopeName #>").ConfigureAwait(false);
<# }
else if (this.Model.Value.IsExpression)
{ #>
        object? value = await context.EvaluateExpressionAsync("<#= this.Model.Value.ExpressionText #>").ConfigureAwait(false);
<# }
else
{
    throw new DeclarativeModelException($"Unsupported value type: {this.Id}.");
} #>
        await context.QueueStateUpdateAsync("<#= this.VariableName #>", value, "<#= this.TopicName #>").ConfigureAwait(false);
    }
}