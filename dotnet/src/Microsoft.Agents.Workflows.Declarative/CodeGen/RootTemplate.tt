<#@ template language="C#" inherits="CodeTemplate, IModeledAction" visibility="internal"  #>
<#@ import namespace="Microsoft.Agents.Workflows.Declarative.Extensions" #>
<#@ import namespace="Microsoft.Agents.Workflows.Declarative.Interpreter" #>
<#@ import namespace="Microsoft.Bot.ObjectModel" #>
<#@ assembly name="System.Core" #>
/// <summary>
/// The root executor for a declarative workflow.
/// </summary>
internal sealed class <#= this.TypeName #>Executor<TInput>(
    DeclarativeWorkflowOptions options,
    Func<TInput, ChatMessage> inputTransform) :
    RootExecutor<TInput>("<#= this.Id #>", options, inputTransform)
    where TInput : notnull
{
    protected override async ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken)
    {<# 
if (this.TypeInfo.EnvironmentVariables.Count > 0)
{ #>
        // Set environment variables<#
    foreach (string variableName in this.TypeInfo.EnvironmentVariables)
    { #>
        await context.QueueStateUpdateAsync("<#= variableName #>", this.GetEnvironmentVariable("<#= variableName #>"), "Env").ConfigureAwait(false); <#
    }
}

if (this.TypeInfo.UserVariables.Count > 0)
{ 
#>
        // Initialize variables<#
    foreach (VariableInformationDiagnostic variableInfo in this.TypeInfo.UserVariables)
    {#>
        await context.QueueStateUpdateAsync("<#= variableInfo.Path.VariableName #>", UnassignedValue.Instance, "<#= variableInfo.Path.VariableScopeName #>").ConfigureAwait(false);<#
    }
}#>
    }
}
