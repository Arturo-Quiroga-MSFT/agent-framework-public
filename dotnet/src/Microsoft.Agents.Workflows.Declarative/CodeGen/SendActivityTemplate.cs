// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Agents.Workflows.Declarative.CodeGen
{
    using Microsoft.Agents.Workflows.Declarative.Extensions;
    using Microsoft.Bot.ObjectModel;
    using Microsoft.Extensions.AI;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class SendActivityTemplate : CodeTemplate
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n/// <summary>\n/// Formats a message template and sends an activity event.\n/// </" +
                    "summary>\ninternal sealed class ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Name));
            
            #line default
            #line hidden
            this.Write("Executor(FormulaSession session) : ActionExecutor(id: \"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Id));
            
            #line default
            #line hidden
            this.Write("\", session)\n{\n    // <inheritdoc />\n    protected override async ValueTask Execut" +
                    "eAsync(IWorkflowContext context, CancellationToken cancellationToken)\n    { ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"

if (this.Model.Activity is MessageActivityTemplate messageActivity)
{ 
            
            #line default
            #line hidden
            this.Write("\n        string activityText = \n            await context.FormatTemplateAsync( ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"

    foreach (TemplateLine line in messageActivity.Text)
    {  
            
            #line default
            #line hidden
            this.Write("\n                \"\"\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"

        foreach (string text in line.ToTemplateString().ByLine())
        { 
            
            #line default
            #line hidden
            this.Write("\n                ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(text));
            
            #line default
            #line hidden
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"

        } 
            
            #line default
            #line hidden
            this.Write("\n                \"\"\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"

    } 
     
            
            #line default
            #line hidden
            this.Write("\n            );\n        AgentRunResponse response = new([new ChatMessage(ChatRole" +
                    ".Assistant, activityText)]);\n        await context.AddEventAsync(new AgentRunRes" +
                    "ponseEvent(this.Id, response)).ConfigureAwait(false);");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SendActivityTemplate.tt"

} 
            
            #line default
            #line hidden
            this.Write("\n    }\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"

void AssignVariable(PropertyPath targetVariable, string valueVariable)
{

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"
this.Write("\n        await context.QueueStateUpdateAsync(key: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(VariableName(targetVariable)));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"
this.Write("\", value: ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(valueVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"
this.Write(", scopeName: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(VariableScope(targetVariable)));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"
this.Write("\").ConfigureAwait(false);");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\AssignVariableTemplate.tt"

}

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"

void EvaluateValueExpression(ValueExpression expression, string targetVariable) =>
    EvaluateValueExpression<object>(expression, targetVariable);

void EvaluateValueExpression<TValue>(ValueExpression expression, string targetVariable)
{
    if (expression is null)
    { 
        throw new DeclarativeModelException($"Undefined expression for action '{this.Id}'.");
    }
    else if (expression.IsLiteral)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TValue).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("? ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(Format(expression.LiteralValue)));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(";");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
 
    }
    else if (expression.IsVariableReference)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TValue).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("? ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = await context.ReadStateAsync<");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TValue).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(">(key: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.VariableReference.VariableName));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\", scopeName: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.VariableReference.VariableScopeName));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\").ConfigureAwait(false);");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"

    }
    else if (expression.IsExpression)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TValue).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("? ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = await context.EvaluateExpressionAsync(\"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.ExpressionText));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\").ConfigureAwait(false);");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}

void EvaluateStringExpression(StringExpression expression, string targetVariable)
{
    if (expression is null)
    { 
        throw new DeclarativeModelException($"Undefined expression for action '{this.Id}'.");
    }
    else if (expression.IsLiteral)
    { // %%% INCOMPLETE: MULTILINE 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        string ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.LiteralValue));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\";");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
 
    }
    else if (expression.IsVariableReference)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        string ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = await context.ReadStateAsync<object>(key: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.VariableReference.VariableName));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\", scopeName: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.VariableReference.VariableScopeName));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\").ConfigureAwait(false);");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"

    }
    else if (expression.IsExpression)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        string ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = await context.EvaluateExpressionAsync(\"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.ExpressionText));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\").ConfigureAwait(false);");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}

// %%% TODO: Expose underlying enum and map to public one.
void EvaluateEnumExpression<TEnum>(EnumExpression<TEnum> expression, string targetVariable) where TEnum : EnumWrapper
{
    if (expression is null)
    {
        throw new DeclarativeModelException($"Undefined expression for action '{this.Id}'.");
    }
    else if (expression.IsLiteral)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TEnum).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TEnum).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(".");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.LiteralValue));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(";");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
 
    }
    else if (expression.IsVariableReference)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TEnum).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = await context.ReadStateAsync<");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TEnum).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(">(key: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.VariableReference.VariableName));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\", scopeName: \"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.VariableReference.VariableScopeName));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\").ConfigureAwait(false);");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"

    }
    else if (expression.IsExpression)
    { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\n        ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TEnum).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(targetVariable));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(" = await context.EvaluateExpressionAsync");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(typeof(TEnum).Name));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("(\"");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(expression.ExpressionText));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
this.Write("\").ConfigureAwait(false);");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\EvaluateExpressionTemplate.tt"
 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\FormatMessageTemplate.tt"

void FormatMessageTemplate(TemplateLine line)
{
        foreach (string text in line.ToTemplateString().ByLine())
        { 
        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\FormatMessageTemplate.tt"
this.Write("\n                ");

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\FormatMessageTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(text));

        
        #line default
        #line hidden
        
        #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\Snippets\FormatMessageTemplate.tt"

        }
}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
