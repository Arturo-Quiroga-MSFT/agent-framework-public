// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.Agents.Workflows.Declarative.CodeGen
{
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class SetVariableTemplate : CodeTemplate
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\n");
            this.Write("\ninternal sealed class ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Name));
            
            #line default
            #line hidden
            this.Write("Executor(FormulaSession session) : ActionExecutor(id: \"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Id));
            
            #line default
            #line hidden
            this.Write("\", session)\n{\n    protected override async ValueTask ExecuteAsync(IWorkflowContex" +
                    "t context, CancellationToken cancellationToken)\n    {");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
 
if (this.Model.Value is null)
{ 
    throw new DeclarativeModelException($"Undefined value type: {this.Id}.");
}
else if (this.Model.Value.IsLiteral)
{ 
            
            #line default
            #line hidden
            this.Write("\n        object? value = ");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Format(this.Model.Value.LiteralValue)));
            
            #line default
            #line hidden
            this.Write(";\n");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
 }
else if (this.Model.Value.IsVariableReference)
{ 
            
            #line default
            #line hidden
            this.Write("\n        object? value = await context.ReadStateAsync<object>(\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Model.Value.VariableReference.VariableName));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Model.Value.VariableReference.VariableScopeName));
            
            #line default
            #line hidden
            this.Write("\").ConfigureAwait(false);\n");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
 }
else if (this.Model.Value.IsExpression)
{ 
            
            #line default
            #line hidden
            this.Write("\n        object? value = await context.EvaluateExpressionAsync(\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.Model.Value.ExpressionText));
            
            #line default
            #line hidden
            this.Write("\").ConfigureAwait(false);\n");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
 }
else
{
    throw new DeclarativeModelException($"Unsupported value type: {this.Id}.");
} 
            
            #line default
            #line hidden
            this.Write("\n        await context.QueueStateUpdateAsync(\"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.VariableName));
            
            #line default
            #line hidden
            this.Write("\", value, \"");
            
            #line 1 "C:\Users\crickman\source\repos\af5\dotnet\src\Microsoft.Agents.Workflows.Declarative\CodeGen\SetVariableTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.TopicName));
            
            #line default
            #line hidden
            this.Write("\").ConfigureAwait(false);\n    }\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
