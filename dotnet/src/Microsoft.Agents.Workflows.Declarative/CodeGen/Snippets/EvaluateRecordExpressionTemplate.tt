<#+
void EvaluateRecordExpression<TValue>(ObjectExpression<RecordDataValue> expression, string targetVariable)
{
    string resultTypeName = $"Dictionary<string, {GetTypeAlias<TValue>()}?>?";
    if (expression is null)
    {#>
        <#= resultTypeName #> <#= targetVariable #> = null;<#+ 
    }
    else if (expression.IsLiteral)
    {#>
        <#= resultTypeName #> <#= targetVariable #> =
            <#= FormatDataValue(expression.LiteralValue) #>;<#+ 
    }
    else if (expression.IsVariableReference)
    {#>
        <#= resultTypeName #> <#= targetVariable #> = await context.ReadStateAsync<<#= resultTypeName #>>(key: "<#= expression.VariableReference.VariableName #>", scopeName: "<#= expression.VariableReference.VariableScopeName #>").ConfigureAwait(false);<#+
    }
    else if (expression.IsExpression)
    {#>
        <#= resultTypeName #> <#= targetVariable #> = await context.EvaluateExpressionAsync(<#= FormatStringValue(expression.ExpressionText) #>).ConfigureAwait(false);<#+ 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}
#>