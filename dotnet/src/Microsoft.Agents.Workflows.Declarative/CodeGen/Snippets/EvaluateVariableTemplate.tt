<#+
void EvaluateVariable(ValueExpression expression, string targetVariable)
{
    if (expression is null)
    { 
        throw new DeclarativeModelException($"Undefined expression: {this.Id}.");
    }
    else if (expression.IsLiteral)
    { #>
        object? <#= targetVariable #> = <#= Format(expression.LiteralValue) #>;<#+ 
    }
    else if (expression.IsVariableReference)
    { #>
        object? <#= targetVariable #> = await context.ReadStateAsync<object>(key: "<#= expression.VariableReference.VariableName #>", scopeName: "<#= expression.VariableReference.VariableScopeName #>").ConfigureAwait(false);<#+
    }
    else if (expression.IsExpression)
    { #>
        object? <#= targetVariable #> = await context.EvaluateExpressionAsync("<#= expression.ExpressionText #>").ConfigureAwait(false);<#+ 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type: {this.Id}.");
    }
}

void EvaluateVariable(StringExpression expression, string targetVariable)
{
    if (expression is null)
    { 
        throw new DeclarativeModelException($"Undefined expression: {this.Id}.");
    }
    else if (expression.IsLiteral)
    { // %%% INCOMPLETE: MULTILINE #>
        string <#= targetVariable #> = "<#= expression.LiteralValue #>";<#+ 
    }
    else if (expression.IsVariableReference)
    { #>
        string <#= targetVariable #> = await context.ReadStateAsync<object>(key: "<#= expression.VariableReference.VariableName #>", scopeName: "<#= expression.VariableReference.VariableScopeName #>").ConfigureAwait(false);<#+
    }
    else if (expression.IsExpression)
    { #>
        string <#= targetVariable #> = await context.EvaluateExpressionAsync("<#= expression.ExpressionText #>").ConfigureAwait(false);<#+ 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type: {this.Id}.");
    }
}
#>