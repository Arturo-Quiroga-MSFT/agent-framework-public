<#+
void EvaluateEnumExpression<TWrapper, TValue>(
    EnumExpression<TWrapper> expression, 
    string targetVariable,
    IDictionary<TWrapper, string> resultMap,
    string defaultValue = null,
    bool qualifyResult = false,
    bool isNullable = false)
        where TWrapper : EnumWrapper
{
    string resultType = $"{GetTypeAlias<TValue>()}{(isNullable ? "?" : "")}";
    if (expression is null)
    {#>
        <#= resultType #> <#= targetVariable #> = <#= Format<TValue>(defaultValue) #>;<#+ 
    }
    else if (expression.IsLiteral)
    { 
        resultMap.TryGetValue(expression.LiteralValue, out string resultValue);
        if (qualifyResult)
        {#>
        <#= resultType #> <#= targetVariable #> = <#= GetTypeAlias<TValue>() #>.<#= resultValue #>;<#+ 
        }
        else
        {#>
        <#= resultType #> <#= targetVariable #> = <#= Format<TValue>(resultValue) #>;<#+ 
        }
    }
    else if (expression.IsVariableReference)
    {#>
        <#= resultType #> <#= targetVariable #> = await context.ReadStateAsync<<#= resultType #>>(key: "<#= expression.VariableReference.VariableName #>", scopeName: "<#= expression.VariableReference.VariableScopeName #>").ConfigureAwait(false);<#+
    }
    else if (expression.IsExpression)
    {#>
        <#= resultType #> <#= targetVariable #> = await context.EvaluateExpressionAsync<#= resultType #>("<#= expression.ExpressionText #>").ConfigureAwait(false);<#+ 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}
#>