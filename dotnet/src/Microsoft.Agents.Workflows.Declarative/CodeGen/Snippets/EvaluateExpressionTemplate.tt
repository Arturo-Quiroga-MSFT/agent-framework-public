<#+
void EvaluateValueExpression(ValueExpression expression, string targetVariable) =>
    EvaluateValueExpression<object>(expression, targetVariable);

void EvaluateValueExpression<TValue>(ValueExpression expression, string targetVariable)
{
    if (expression is null)
    { 
        throw new DeclarativeModelException($"Undefined expression for action '{this.Id}'.");
    }
    else if (expression.IsLiteral)
    { #>
        <#= GetTypeAlias<TValue>() #>? <#= targetVariable #> = <#= Format(expression.LiteralValue) #>;<#+ 
    }
    else if (expression.IsVariableReference)
    {#>
        <#= GetTypeAlias<TValue>() #>? <#= targetVariable #> = await context.ReadStateAsync<<#= typeof(TValue).Name #>>(key: "<#= expression.VariableReference.VariableName #>", scopeName: "<#= expression.VariableReference.VariableScopeName #>").ConfigureAwait(false);<#+
    }
    else if (expression.IsExpression)
    {#>
        <#= GetTypeAlias<TValue>() #>? <#= targetVariable #> = await context.EvaluateExpressionAsync("<#= expression.ExpressionText #>").ConfigureAwait(false);<#+ 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}

void EvaluateStringExpression(StringExpression expression, string targetVariable)
{
    if (expression is null)
    { 
        throw new DeclarativeModelException($"Undefined expression for action '{this.Id}'.");
    }
    else if (expression.IsLiteral)
    {
        if (expression.LiteralValue.Contains("\n"))
        {#>
        string <#= targetVariable #> = 
            """
            <#= expression.LiteralValue #>
            """;<#+ 
        }
        else
        {#>
        string <#= targetVariable #> = "<#= expression.LiteralValue #>";<#+ 
        }
    }
    else if (expression.IsVariableReference)
    {#>
        string <#= targetVariable #> = await context.ReadStateAsync<object>(key: "<#= expression.VariableReference.VariableName #>", scopeName: "<#= expression.VariableReference.VariableScopeName #>").ConfigureAwait(false);<#+
    }
    else if (expression.IsExpression)
    {#>
        string <#= targetVariable #> = await context.EvaluateExpressionAsync("<#= expression.ExpressionText #>").ConfigureAwait(false);<#+ 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}

void EvaluateEnumExpression<TWrapper, TValue>(
    EnumExpression<TWrapper> expression, 
    string targetVariable,
    IDictionary<TWrapper, string> resultMap,
    string defaultValue = null,
    bool qualifyResult = false)
        where TWrapper : EnumWrapper
{
    if (expression is null)
    {#>
        <#= GetTypeAlias<TValue>() #> <#= targetVariable #> = <#= Format<TValue>(defaultValue) #>;<#+ 
    }
    else if (expression.IsLiteral)
    { 
        resultMap.TryGetValue(expression.LiteralValue, out string resultValue);
        if (qualifyResult)
        {#>
        <#= GetTypeAlias<TValue>() #> <#= targetVariable #> = <#= typeof(TValue).Name #>.<#= resultValue #>;<#+ 
        }
        else
        {#>
        <#= GetTypeAlias<TValue>() #> <#= targetVariable #> = <#= Format<TValue>(resultValue) #>;<#+ 
        }
    }
    else if (expression.IsVariableReference)
    {#>
        <#= GetTypeAlias<TValue>() #> <#= targetVariable #> = await context.ReadStateAsync<<#= typeof(TValue).Name #>>(key: "<#= expression.VariableReference.VariableName #>", scopeName: "<#= expression.VariableReference.VariableScopeName #>").ConfigureAwait(false);<#+
    }
    else if (expression.IsExpression)
    {#>
        <#= GetTypeAlias<TValue>() #> <#= targetVariable #> = await context.EvaluateExpressionAsync<#= typeof(TValue).Name #>("<#= expression.ExpressionText #>").ConfigureAwait(false);<#+ 
    }
    else
    {
        throw new DeclarativeModelException($"Unsupported value type for action '{this.Id}'.");
    }
}
#>