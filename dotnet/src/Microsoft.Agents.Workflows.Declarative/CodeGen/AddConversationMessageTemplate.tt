<#@ template language="C#" inherits="CodeTemplate" visibility="internal" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ include file="Snippets/Index.tt" once="true" #>
/// <summary>
/// Adds a new message to the specified agent conversation
/// </summary>
internal sealed class <#= this.Name #>Executor(FormulaSession session, WorkflowAgentProvider agentProvider) : ActionExecutor(id: "<#= this.Id #>", session)
{
    // <inheritdoc />
    protected override async ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
    {<# 
        EvaluateStringExpression(this.Model.ConversationId, "conversationId");
        EvaluateEnumExpression<AgentMessageRoleWrapper, ChatRole>(this.Model.Role, "role", RoleMap, DefaultRole, qualifyResult: true); #>
        ChatMessage newMessage = new(role, [.. this.GetContent()]); //{ AdditionalProperties = this.GetMetadata() }; // %%% TODO: METADATA
        await agentProvider.CreateMessageAsync(conversationId, newMessage, cancellationToken).ConfigureAwait(false);<#
        AssignVariable(this.Message, "newMessage");
        #>
    }

    private IEnumerable<AIContent> GetContent()
    {<#
        int index = 0;
        foreach (AddConversationMessageContent content in this.Model.Content)
        {
           ++index;#>
        string contentValue<#= index #> =
            await context.FormatTemplateAsync(
                """<#
                FormatMessageTemplate(content.Value); #>
                """);<#
            AgentMessageContentType contentType = content.Type.Value;
            if (contentType == AgentMessageContentType.ImageUrl)
            {#>
        yield return new UriContent(contentValue, "image/*");<#
            }
            else if (contentType == AgentMessageContentType.ImageFile)
            {#>
        yield return new HostedFileContent(contentValue);<#
            }
            else
            {#>
        yield return new TextContent(contentValue<#= index #>);<#
            }
        }#>
    }
}