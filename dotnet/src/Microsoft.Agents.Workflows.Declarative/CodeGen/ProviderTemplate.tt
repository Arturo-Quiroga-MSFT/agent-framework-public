<#@ template language="C#" visibility="internal" #>
<#@ import namespace="Microsoft.Agents.Workflows.Declarative.Extensions" #>
<#@ assembly name="System.Core" #>
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows;
using Microsoft.Agents.Workflows.Declarative;
using Microsoft.Agents.Workflows.Declarative.Kit;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.AI.Agents;
<#
if (this.Namespace is not null) 
{#>
namespace <#= this.Namespace #>;
<#
}
#>
public static class <#= this.Prefix ?? string.Empty #>WorkflowProvider
{<#
foreach (string executor in ByLine(this.Executors, formatGroup: true))
{ #>
    <#= executor #><#
}
#>
    public static Workflow<TInput> CreateWorkflow<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null) 
        where TInput : notnull
    {
        // Create executor instances
        inputTransform ??= message => DeclarativeWorkflowBuilder.DefaultTransform(message);
        <#= this.RootExecutorType #>Executor<TInput> root = new(options, inputTransform);<#
foreach (string instance in ByLine(this.Instances))
{ #>
        <#= instance #><#
}#>

        // Define the workflow builder
        WorkflowBuilder builder = new(root);

        // Connect executors<#
foreach (string edge in ByLine(this.Edges))
{ #>
        <#= edge #><#
}
 #>

        // Build the workflow
        return builder.Build<TInput>();
    }
}
