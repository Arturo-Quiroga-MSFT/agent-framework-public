// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows.Reflection;
using Microsoft.Extensions.Configuration;

namespace Microsoft.Agents.Workflows.Declarative; // %%% TODO

/// <summary>
/// Base class for an entry-point workflow executor that receives the initial trigger message.
/// </summary>
/// <typeparam name="TInput">The type of the initial message that starts the workflow.</typeparam>
public abstract class RootExecutor<TInput> :
    ReflectingExecutor<RootExecutor<TInput>>,
    IMessageHandler<TInput>
    where TInput : notnull
{
    /// <summary>
    /// Initializes a new instance of the <see cref="RootExecutor{TInput}"/> class.
    /// </summary>
    /// <param name="id">An optional identifier. If omitted, an identifier is generated by the base class.</param>
    /// <param name="configuration">
    /// Optional configuration source. If supplied, <see cref="GetEnvironmentVariable(string)"/> will read from it
    /// before falling back to OS environment variables.
    /// </param>
    protected RootExecutor(string id, IConfiguration? configuration = null)
        : base(id)
    {
        this.Configuration = configuration;
    }

    private IConfiguration? Configuration { get; }

    /// <inheritdoc/>
    public async ValueTask HandleAsync(TInput message, IWorkflowContext context)
    {
        try
        {
            await this.ExecuteAsync(message, context, cancellationToken: default).ConfigureAwait(false);

            await context.SendMessageAsync(this.Id).ConfigureAwait(false); // %%% TODO: ???
        }
        catch (DeclarativeActionException exception)
        {
            Debug.WriteLine($"ERROR [{this.Id}] {exception.GetType().Name}\n{exception.Message}");
            throw;
        }
        catch (Exception exception)
        {
            Debug.WriteLine($"ERROR [{this.Id}] {exception.GetType().Name}\n{exception.Message}");
            throw new DeclarativeActionException($"Unhandled workflow failure - #{this.Id} ({this.GetType().Name})", exception);
        }
    }

    /// <summary>
    /// Executes the core logic of the root workflow for the provided initial message.
    /// </summary>
    /// <param name="message">The initial input message that triggered workflow execution.</param>
    /// <param name="context">The workflow execution context providing messaging and state services.</param>
    /// <param name="cancellationToken">A token that can be used to observe cancellation.</param>
    /// <returns>A <see cref="ValueTask"/> representing the asynchronous execution operation.</returns>
    protected abstract ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken = default);

    /// <summary>
    /// Retrieves the value of a named variable from <see cref="IConfiguration"/> if available;
    /// otherwise falls back to the process environment variables.
    /// </summary>
    /// <param name="name">The configuration or environment variable name.</param>
    /// <returns>The variable value, or an empty string if not found.</returns>
    protected string GetEnvironmentVariable(string name)
    {
        if (this.Configuration is not null)
        {
            return this.Configuration[name] ?? string.Empty;
        }

        return Environment.GetEnvironmentVariable(name) ?? string.Empty;
    }
}
