// Copyright (c) Microsoft. All rights reserved.

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows.Declarative.Extensions;
using Microsoft.Agents.Workflows.Declarative.Interpreter;
using Microsoft.Agents.Workflows.Declarative.PowerFx;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.Configuration;

namespace Microsoft.Agents.Workflows.Declarative.Kit;

/// <summary>
/// Base class for an entry-point workflow executor that receives the initial trigger message.
/// </summary>
/// <typeparam name="TInput">The type of the initial message that starts the workflow.</typeparam>
public abstract class RootExecutor<TInput> : Executor<TInput> where TInput : notnull
{
    /// <summary>
    /// Initializes a new instance of the <see cref="RootExecutor{TInput}"/> class.
    /// </summary>
    /// <param name="id">An optional identifier. If omitted, an identifier is generated by the base class.</param>
    /// <param name="options">Configuration options for workflow execution.</param>
    protected RootExecutor(string id, DeclarativeWorkflowOptions options)
        : base(id)
    {
        this.Configuration = options.Configuration;
        this.State = new WorkflowFormulaState(options.CreateRecalcEngine());
        this.Context = new ExpressionContext(this.State);
    }

    private IConfiguration? Configuration { get; }
    private WorkflowFormulaState State { get; }

    /// <summary>
    /// %%% TODO
    /// </summary>
    public ExpressionContext Context { get; }

    /// <inheritdoc/>
    public override async ValueTask HandleAsync(TInput message, IWorkflowContext context)
    {
        await this.ExecuteAsync(message, new DeclarativeWorkflowContext(context, this.State), cancellationToken: default).ConfigureAwait(false);

        await context.SendMessageAsync(new ActionExecutorResult(this.Id)).ConfigureAwait(false);
    }

    /// <summary>
    /// Executes the core logic of the root workflow for the provided initial message.
    /// </summary>
    /// <param name="message">The initial input message that triggered workflow execution.</param>
    /// <param name="context">The workflow execution context providing messaging and state services.</param>
    /// <param name="cancellationToken">A token that propagates notification when operation should be canceled.</param>
    /// <returns>A <see cref="ValueTask"/> representing the asynchronous execution operation.</returns>
    protected abstract ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken = default);

    /// <summary>
    /// Retrieves the value of a named variable from <see cref="IConfiguration"/> if available;
    /// otherwise falls back to the process environment variables.
    /// </summary>
    /// <param name="name">The configuration or environment variable name.</param>
    /// <returns>The variable value, or an empty string if not found.</returns>
    protected string GetEnvironmentVariable(string name)
    {
        if (this.Configuration is not null)
        {
            return this.Configuration[name] ?? string.Empty;
        }

        return Environment.GetEnvironmentVariable(name) ?? string.Empty;
    }

    /// <summary>
    /// Transforms the input message into a <see cref="ChatMessage"/>.
    /// </summary>
    /// <param name="message">The original input object.</param>
    /// <returns>A <see cref="ChatMessage"/> derived from the input.</returns>
    internal protected static ChatMessage DefaultInputTransform(TInput message) =>
        message switch
        {
            ChatMessage chatMessage => chatMessage,
            string stringMessage => new ChatMessage(ChatRole.User, stringMessage),
            _ => new(ChatRole.User, $"{message}")
        };
}
