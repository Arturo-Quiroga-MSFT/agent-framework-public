// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable
#pragma warning disable IDE0005 // Extra using directive is ok.

using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Agents.Workflows;
using Microsoft.Agents.Workflows.Declarative;
using Microsoft.Agents.Workflows.Declarative.Kit;
using Microsoft.Extensions.AI;
using Microsoft.Extensions.AI.Agents;

namespace Test.Workflow;

public static class WorkflowProvider
{
    /// <summary>
    /// The root executor for a declarative workflow.
    /// </summary>
    internal sealed class MyWorkflowRootExecutor<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform) :
        RootExecutor<TInput>("my_workflow_Root", options, inputTransform)
        where TInput : notnull
    {
        protected override async ValueTask ExecuteAsync(TInput message, IWorkflowContext context, CancellationToken cancellationToken)
        {
            // Set environment variables

            // Set user variables to default values
        }
    }

    internal sealed class EndAllExecutor(FormulaSession session) : ActionExecutor(id: "end_all", session)
    {
        protected override ValueTask ExecuteAsync(IWorkflowContext context, CancellationToken cancellationToken)
        {
            // No operation
            return default;
        }
    }

    public static Workflow<TInput> CreateWorkflow<TInput>(
        DeclarativeWorkflowOptions options,
        Func<TInput, ChatMessage>? inputTransform = null)
        where TInput : notnull
    {
        // Create executor instances
        MyWorkflowRootExecutor<TInput> root = new(options, inputTransform);
        EndAllExecutor endAll = new(root.Session);

        // Define the workflow builder
        WorkflowBuilder builder = new(root);

        // Connect executors
        builder.AddEdge(root, endAll);

        // Build the workflow
        return builder.Build<TInput>();
    }
}
